{"version":3,"sources":["webpack:///./content/Navigation/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6OAMaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,oCACA,mHACA,iEACA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAK,+BAAGA,WAAW,UAAa,CACjE,KAAQ,uBAD8B,gBAG5C,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,+BAAGA,WAAW,UAAa,CACjE,KAAQ,wBAD8B,iBAG5C,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,+BAAGA,WAAW,UAAa,CACjE,KAAQ,4BAD8B,gCAI9C,kDAAiC,sBAAQA,WAAW,KAAnB,gCAAjC,qHACA,uBACA,iCACA,0DAAyC,sBAAQA,WAAW,KAAI,+BAAGA,WAAW,UAAa,CACrF,KAAQ,iEADkD,+BAAhE,4BAE+E,sBAAQA,WAAW,KAAI,+BAAGA,WAAW,UAAa,CAC3H,KAAQ,2EADwF,sBAFtG,KAKA,yFAAwE,sBAAQA,WAAW,KAAnB,oBAAxE,UACA,uEACA,uBACA,sBACE,kBAAIA,WAAW,MAAf,oDAEF,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,0GAML,8DACA,sDAAqC,sBAAQA,WAAW,KAAnB,wCAArC,oDAAkK,sBAAQA,WAAW,KAAnB,YAAlK,KACA,uBACA,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,0CAEF,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,+IAOL,sDAAqC,sBAAQA,WAAW,KAAnB,4DAArC,uDAAyL,sBAAQA,WAAW,KAAnB,YAAzL,KACA,uBACA,iGACA,2OACA,uBACA,wCACA,iIACF,sBAAQA,WAAW,KAAnB,mBADE,yFAEA,iFACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,+BACA,kBAAIA,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,mDAEF,mFACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,kEAIL,wEACA,yGACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,uCAIL,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,sBAEL,kDAAiC,sBAAQA,WAAW,KAAnB,cAAjC,gGACA,qBAAG,iCAAKA,WAAW,KAAQ,CACvB,IAAO,mBACP,IAAO,kBAEX,2CACA,uBACA,sCACA,kDAAiC,sBAAQA,WAAW,KAAnB,iBAAjC,mPAEA,mDAAkC,sBAAQA,WAAW,KAAnB,WAAlC,uCACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,mFAML,gOAEA,sBACE,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,wEACA,kBAAIA,WAAW,MAAf,+DAEF,6LACA,iEACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,kIAUTJ,EAAWK,gBAAiB","file":"component---content-navigation-index-mdx-6faea0c4b9028fc9a4f1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rejon/MaximumMDX/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Navigation`}</h1>\n    <p>{`The most opinionated part of this starter is how navigational data is provided and built. `}</p>\n    <p>{`There are 3 central forms of navigation:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"/navigation/header\"\n          }}>{`The Header`}</a></strong></li>\n      <li parentName=\"ol\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"/navigation/sidenav\"\n          }}>{`The Sidenav`}</a></strong></li>\n      <li parentName=\"ol\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"/navigation/breadbrumbs\"\n          }}>{`The Breadbrumbs Component`}</a></strong></li>\n    </ol>\n    <p>{`All of the data follows a `}<strong parentName=\"p\">{`What You See Is What You Get`}</strong>{` (WYSIWYG) philosophy, with some frontmatter controllers to give you more control over how things are displayed. `}</p>\n    <hr></hr>\n    <h1>{`Routing`}</h1>\n    <p>{`Pages are built by leveraging the `}<strong parentName=\"p\"><a parentName=\"strong\" {...{\n          \"href\": \"https://www.gatsbyjs.com/plugins/gatsby-plugin-page-creator/\"\n        }}>{`gatsby-plugin-page-creator`}</a></strong>{` in combination with the `}<strong parentName=\"p\"><a parentName=\"strong\" {...{\n          \"href\": \"https://www.gatsbyjs.com/plugins/gatsby-plugin-mdx/?=gatsby-plugin-mdx\"\n        }}>{`gatsby-plugin-mdx`}</a></strong>{`.`}</p>\n    <p>{`You can find the configurations for both of these plugins in the `}<strong parentName=\"p\">{`gatsby-config.js`}</strong>{` file.`}</p>\n    <p>{`Here's some examples of how routing will work:`}</p>\n    <hr></hr>\n    <ol>\n      <li parentName=\"ol\">{`You have a content folder that looks like this:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`‚îú‚îÄ‚îÄ content\n‚îÇ   ‚îú‚îÄ‚îÄ index.mdx\n‚îÇ   ‚îú‚îÄ‚îÄ Blog\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.mdx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ BlogPost1.mdx <---\n`}</code></pre>\n    <p>{`and you want to go to \"Blog Post 1\". `}</p>\n    <p>{`Your url will look like this: `}<strong parentName=\"p\">{`http://localhost:8000/Blog/BlogPost1`}</strong>{` (Notice the effect of capitalization on the url `}<strong parentName=\"p\">{`WYSIWYG!`}</strong>{`)`}</p>\n    <hr></hr>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`You want to go to \"Portfolio Post B\":`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`‚îú‚îÄ‚îÄ content\n‚îÇ   ‚îú‚îÄ‚îÄ index.mdx\n‚îÇ   ‚îú‚îÄ‚îÄ works\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.mdx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ my-porfolio\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ portfolio_post_b.mdx <---\n`}</code></pre>\n    <p>{`Your url will look like this: `}<strong parentName=\"p\">{`http://localhost:8000/works/my-porfolio/portfolio_post_b`}</strong>{` (Notice the underscores and dashes being included. `}<strong parentName=\"p\">{`WYSIWYG!`}</strong>{`)`}</p>\n    <hr></hr>\n    <p>{`Please don't use spaces in your file names or you will have a bad time. `}</p>\n    <p>{`You may find your pages using the file name or the first H1 header of your files. While the WYSIWYG rule is strict, there is one rule that gives your more flexibility to controlling how your data is displayed. `}</p>\n    <hr></hr>\n    <h1>{`The Title Rule`}</h1>\n    <p>{`Lets say you have a page named \"all_about_beans.mdx\" but when you compile you find the name of the page\n`}<strong parentName=\"p\">{`all_about_beans`}</strong>{`. That don't look so good, so there's a fallback rule to give you control the label. `}</p>\n    <p>{`The Title Rule is simple and the priority is as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`title`}</strong>{` is present in frontmatter.`}</li>\n      <li parentName=\"ol\">{`Document has an H1 (#), use the first one. `}</li>\n      <li parentName=\"ol\">{`No title or H1 is present, use the file name. `}</li>\n    </ol>\n    <p>{`Here's an example, you have a file called all_about_beans:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`‚îú‚îÄ‚îÄ content\n‚îÇ   ‚îú‚îÄ‚îÄ index.mdx\n‚îÇ   ‚îî‚îÄ‚îÄ all_about_beans.mdx\n`}</code></pre>\n    <p>{`But you want it to display as \"Beans and You\". `}</p>\n    <p>{`In your mdx file you can use frontmatter or have your 1st H1 be \"Beans and You\":`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`---\ntitle: \"Beans and You\"\n---\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# Beans and You\n`}</code></pre>\n    <p>{`The title rule is applied `}<strong parentName=\"p\">{`everywhere`}</strong>{`, the Header, the Sidenav, the Breadcrumbs element, and the title at the top of our browser.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/seo-example.png\",\n        \"alt\": \"Seo-Example\"\n      }}></img></p>\n    <p>{`Speaking of seo...`}</p>\n    <hr></hr>\n    <h1>{`SEO and You!`}</h1>\n    <p>{`If you take a look at the `}<strong parentName=\"p\">{`mdx_layout.js`}</strong>{` file you'll see a number of methods being invoked using data pulled from a graphql query that gets \"every single page\".\nThis is a little crunchy of an execution, but it gets the job done. (If you know how to do it better, please lmk üôè)`}</p>\n    <p>{`However if you look around `}<strong parentName=\"p\">{`line 77`}</strong>{` you'll find an object called seo. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const seo = {\n    title: _pageTitle,\n    description,\n    keywords,\n  };\n`}</code></pre>\n    <p>{`We push these parameters from your specific file (since mdx_layout is applied to every single page during build time)\nto the SEO component, which leverages react-helmet to build out head meta data. `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Title follows the title rule. `}</li>\n      <li parentName=\"ol\">{`Description is a frontmatter variable you can provide to your file. `}</li>\n      <li parentName=\"ol\">{`Keywords is another frontmatter variable you can provide. `}</li>\n    </ol>\n    <p>{`Each of these fill in some default meta values, but if you'd like to expand this feature you can add more frontmatter variables, expand the SEO component, and more!`}</p>\n    <p>{`Example of a fully fleshed out seo page:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`---\ntitle: \"Beans and You\"\ndescription: \"Thinking about them beans\"\nkeywords: \"Food, beans, thinking, about, them\"\n---\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}